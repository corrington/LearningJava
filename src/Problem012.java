/*
ProjectEuler.net
Problem 12 - Highly divisible triangular number
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
 */
public class Problem012 {

    // notes: this approach is brute force. It won't scale well with larger numbers.
    public long getHighlyDivisibleTriangularNumber(int maxDivisors) {

        if (maxDivisors == 1) return 1;

        int i = 1;
        int triangleNumber = 1;
        int numOfDivisors = 0;

        while (numOfDivisors < maxDivisors) {
            numOfDivisors = 0;

            // generate the next triangle number
            i++;
            triangleNumber += i;

            // We can stop dividing when the divisor exceeds the square root of the triangle number.
            int upperLimit = (int)Math.sqrt(triangleNumber);

            // determine the number of divisors
            for (int divisor = 1; divisor <= upperLimit; divisor++) {
                if (triangleNumber % divisor == 0) {
                    // For every exact divisor up to the square root,
                    // there is a corresponding divisor about the square root.
                    numOfDivisors += 2;
                } // if
            } // for

            // Correction for a perfect square
            if (triangleNumber == upperLimit*upperLimit) {
                numOfDivisors--;
            }

        } // while

        return triangleNumber;

    } // getHighlyDivisibleTriangularNumber()

} // class Problem012
