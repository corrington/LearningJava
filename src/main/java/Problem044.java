/*
ProjectEuler.net
Problem 44 - Pentagon numbers
Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

     1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and
D = |Pk − Pj| is minimised; what is the value of D?
 */

import java.util.Arrays;

public class Problem044 {
    // I had no idea what the upper bound of this problem was
    // so I just picked one and worked up from there
    private static final int maxPentagonLookupEntries = 10_000;

    // Since we're going to be looking up pentagon values often,
    // I created a lookup table that can later be searched using
    // a very fast binary search
    private static final long[] pentagonLookup = new long[maxPentagonLookupEntries];

    // Populates the lookup table so we quickly determine if a
    // number is a pentagon number
    private void buildPentagonLookup() {
        for (int n = 1; n < maxPentagonLookupEntries; n++) {
            long Pn = (long)n * ( 3L * (long)n - 1L) / 2L;
            pentagonLookup[n] = Pn;
        } // for n
    } // buildPentagonLookup()

    private void printPentagonLookup() {
        System.out.print("[");
        for (int n = 1; n < maxPentagonLookupEntries; n++) {
            long Pn = pentagonLookup[n];
            System.out.print("(" + n + "," + Pn + ")");
            if (n < maxPentagonLookupEntries - 1) {
                System.out.print(", ");
            }
            if (n % 10 == 0){
                System.out.println();
            }
        } // for n
        System.out.println("]");

    } // printPentagonLookup()

    private boolean isPentagon(final long candidate) {
        return Arrays.binarySearch(pentagonLookup, candidate) >= 0;
    } // isPentagon()

    private long pentagonOf(final int n) {
        return pentagonLookup[n];
    } // pentagonOf()

    boolean areSumAndDiffPentagons(final int j, final int k) {
        return isPentagon(pentagonOf(j) + pentagonOf(k))
                && isPentagon(pentagonOf(k) - pentagonOf(j));
    } // areSumAndDiffPentagons()

    private long findDiffOfMagicalPair() {
        long minimisedDiff = Long.MAX_VALUE;
        for (int k = 2; k < maxPentagonLookupEntries; k++) {
            for (int j = 1; j < k; j++) {
                if (areSumAndDiffPentagons(j,k)) {
                    long Pj = pentagonOf(j);
                    long Pk = pentagonOf(k);
                    long diff = Math.abs(Pk - Pj);
                    //System.out.println("f(" + j +") = " + Pj + " and f(" + k + ") = " + Pk + ", diff is " + diff); // DEBUG
                    minimisedDiff = Math.min(minimisedDiff,diff);
                } // if
            } // for j
        } // for k
        return minimisedDiff;
    } // findDiffOfMagicalPair()

    public static void main(String[] args) {
        var p = new Problem044();

        p.buildPentagonLookup();

        System.out.println("answer is " + p.findDiffOfMagicalPair());

    } // main()

} // class Problem044
